{"version":3,"sources":["src/config/createElement.js","src/config/render.js","src/config/mount.js","src/config/diff.js","src/index.js"],"names":["tagName","attrs","children","vElem","Object","create","assign","render","vNode","document","createTextNode","renderElem","$el","createElement","entries","k","v","setAttribute","child","appendChild","$node","$target","replaceWith","zip","arr1","arr2","zipped","i","Math","min","length","push","diffAttrs","oldAttrs","newAttrs","patches","removeAttribute","patch","diffChildren","oldVChildren","newVChildren","childPatches","forEach","oldVChild","diff","additionalPatches","additionalVChild","slice","$parent","childNodes","$child","oldVTree","newVTree","undefined","remove","$newNode","patchAttrs","patchChildren","createVApp","count","id","dataCount","toString","Array","from","src","vApp","$app","$rootEl","getElementById","setInterval","n","floor","random","vNewApp"],"mappings":"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","file":"src.a2b27638.map","sourceRoot":"..","sourcesContent":["// allow for creating elements without any options\nexport default (tagName, { attrs = {}, children = [] } = {}) => {\n  // Create an object that doesn't inherit from Obj with no proto props.\n  const vElem = Object.create(null);\n\n  Object.assign(vElem, {\n    tagName,\n    attrs,\n    children\n  });\n\n  return vElem;\n};\n","// Translate our virtual dom elements to real DOM elements.\nconst render = vNode => {\n  if (typeof vNode === \"string\") {\n    return document.createTextNode(vNode);\n  }\n\n  return renderElem(vNode);\n};\n\nconst renderElem = ({ tagName, attrs, children }) => {\n  // create the element\n  const $el = document.createElement(tagName);\n  // add all attribute as specified\n  for (const [k, v] of Object.entries(attrs)) {\n    $el.setAttribute(k, v);\n  }\n\n  // append all children\n  for (const child of children) {\n    $el.appendChild(render(child));\n  }\n\n  return $el;\n};\n\nexport default render;\n","export default ($node, $target) => {\n  $target.replaceWith($node);\n  return $node;\n};\n","import render from \"./render\";\n\n// take in two arrays, return a 'zipped' array where it pushes an array with the\n// i index of each array. Loops through the shortest array.\nconst zip = (arr1, arr2) => {\n  const zipped = [];\n  for (let i = 0; i < Math.min(arr1.length, arr2.length); i++) {\n    zipped.push([arr1[i], arr2[i]]);\n  }\n  return zipped;\n};\n\nconst diffAttrs = (oldAttrs, newAttrs) => {\n  const patches = [];\n\n  // setting newAttrs\n  for (const [k, v] of Object.entries(newAttrs)) {\n    patches.push($node => {\n      $node.setAttribute(k, v);\n      return $node;\n    });\n  }\n\n  // removing attrs if they don't exist in the newattrs\n  for (const k in oldAttrs) {\n    if (!(k in newAttrs)) {\n      patches.push($node => {\n        $node.removeAttribute(k);\n        return $node;\n      });\n    }\n  }\n\n  return $node => {\n    for (const patch of patches) {\n      patch($node);\n    }\n    return $node;\n  };\n};\n\nconst diffChildren = (oldVChildren, newVChildren) => {\n  // go through all the old/new children up to the oldchildren length and diff them\n  const childPatches = [];\n  oldVChildren.forEach((oldVChild, i) => {\n    childPatches.push(diff(oldVChild, newVChildren[i]));\n  });\n  /**\n   \n   */\n\n  // if there are additional children past oldChildren length,\n  const additionalPatches = [];\n  for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n    additionalPatches.push($node => {\n      $node.appendChild(render(additionalVChild));\n      return $node;\n    });\n  }\n\n  return $parent => {\n    // since childPatches are expecting the $child, not $parent, $parent childnodes gives nodelist of elements\n    // we cannot just loop through them and call patch($parent)\n    for (const [patch, $child] of zip(childPatches, $parent.childNodes)) {\n      patch($child);\n    }\n\n    // for any remaining patches (zip func above ensures only new nodes are passed here) apply the patch\n    for (const patch of additionalPatches) {\n      patch($parent);\n    }\n    return $parent;\n  };\n};\n\nconst diff = (oldVTree, newVTree) => {\n  // let's assume oldVTree is not undefined!\n  if (newVTree === undefined) {\n    return $node => {\n      $node.remove();\n      // the patch should return the new root node.\n      // since there is none in this case,\n      // we will just return undefined.\n      return undefined;\n    };\n  }\n\n  if (typeof oldVTree === \"string\" || typeof newVTree === \"string\") {\n    if (oldVTree !== newVTree) {\n      // could be 2 cases:\n      // 1. both trees are string and they have different values\n      // 2. one of the trees is text node and\n      //    the other one is elem node\n      // Either case, we will just render(newVTree)!\n      return $node => {\n        const $newNode = render(newVTree);\n        $node.replaceWith($newNode);\n        return $newNode;\n      };\n    } else {\n      // this means that both trees are string\n      // and they have the same values\n      return $node => $node;\n    }\n  }\n\n  if (oldVTree.tagName !== newVTree.tagName) {\n    // we assume that they are totally different and\n    // will not attempt to find the differences.\n    // simply render the newVTree and mount it.\n    return $node => {\n      const $newNode = render(newVTree);\n      $node.replaceWith($newNode);\n      return $newNode;\n    };\n  }\n\n  const patchAttrs = diffAttrs(oldVTree.attrs, newVTree.attrs);\n  const patchChildren = diffChildren(oldVTree.children, newVTree.children);\n\n  return $node => {\n    patchAttrs($node);\n    patchChildren($node);\n    return $node;\n  };\n};\n\nexport default diff;\n","import createElement from \"./config/createElement\";\nimport render from \"./config/render\";\nimport mount from \"./config/mount\";\nimport diff from \"./config/diff\";\n\nconst createVApp = count =>\n  createElement(\"div\", {\n    attrs: {\n      id: \"app\",\n      dataCount: count\n    },\n    children: [\n      \"The current count is: \",\n      count.toString(),\n      ...Array.from({ length: count }, () =>\n        createElement(\"div\", {\n          attrs: {},\n          children: [\n            createElement(\"img\", {\n              attrs: {\n                src: \"https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif\"\n              }\n            }),\n            count % 2 === 0 ? \"Caption!\" : \"\"\n          ]\n        })\n      )\n    ]\n  });\n\nlet vApp = createVApp(0);\nconst $app = render(vApp);\nlet $rootEl = mount($app, document.getElementById(\"app\"));\n\nsetInterval(() => {\n  const n = Math.floor(Math.random() * 10);\n  const vNewApp = createVApp(n);\n  const patch = diff(vApp, vNewApp);\n\n  // we might replace the whole $rootEl,\n  // so we want the patch will return the new $rootEl\n  $rootEl = patch($rootEl);\n\n  vApp = vNewApp;\n}, 2000);\n"]}