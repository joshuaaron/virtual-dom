{"version":3,"sources":["src/config/createElement.js","src/config/render.js","src/config/mount.js","src/config/diff.js","src/index.js"],"names":["tagName","attrs","children","vElem","Object","create","assign","render","vNode","document","createTextNode","renderElem","$el","createElement","entries","k","v","setAttribute","child","appendChild","$node","$target","replaceWith","zip","arr1","arr2","zipped","i","Math","min","length","push","diffAttrs","oldAttrs","newAttrs","patches","removeAttribute","patch","diffChildren","oldVChildren","newVChildren","childPatches","forEach","oldVChild","diff","additionalPatches","additionalVChild","slice","$parent","childNodes","$child","oldVTree","newVTree","undefined","remove","$newNode","patchAttrs","patchChildren","createVirtualApp","count","id","dataCount","toString","Array","from","src","virtualApp","$app","$rootEl","getElementById","setInterval","n","floor","random","updatedVirtualApp"],"mappings":"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","file":"src.a2b27638.map","sourceRoot":"..","sourcesContent":["// allow for creating elements without any options with default params.\nexport default (tagName, { attrs = {}, children = [] } = {}) => {\n\t// Create an object that doesn't inherit from Obj with no proto props.\n\tconst vElem = Object.create(null);\n\n\tObject.assign(vElem, {\n\t\ttagName,\n\t\tattrs,\n\t\tchildren\n\t});\n\n\treturn vElem;\n};\n","// Translate our virtual dom elements to real DOM Nodes.\nconst render = vNode => {\n  if (typeof vNode === \"string\") {\n    return document.createTextNode(vNode);\n  }\n\n  return renderElem(vNode);\n};\n\nconst renderElem = ({ tagName, attrs, children }) => {\n  // create the element\n  const $el = document.createElement(tagName);\n  // add all attribute as specified\n  for (const [k, v] of Object.entries(attrs)) {\n    $el.setAttribute(k, v);\n  }\n\n  // append all children recursively.\n  for (const child of children) {\n    $el.appendChild(render(child));\n  }\n\n  return $el;\n};\n\nexport default render;\n","export default ($node, $target) => {\n  $target.replaceWith($node);\n  return $node;\n};\n","import render from \"./render\";\n\n// take in two arrays, return a 'zipped' array where it pushes an array with the\n// i index of each array. Loops through the shortest array.\nconst zip = (arr1, arr2) => {\n\tconst zipped = [];\n\tfor (let i = 0; i < Math.min(arr1.length, arr2.length); i++) {\n\t\tzipped.push([arr1[i], arr2[i]]);\n\t}\n\treturn zipped;\n};\n\n// Method to diff the attributes of the old virtual dom and the new virtual dom.\nconst diffAttrs = (oldAttrs, newAttrs) => {\n\tconst patches = [];\n\n\t// setting newAttrs\n\tfor (const [k, v] of Object.entries(newAttrs)) {\n\t\tpatches.push($node => {\n\t\t\t$node.setAttribute(k, v);\n\t\t\treturn $node;\n\t\t});\n\t}\n\n\t// removing attrs if they don't exist in the newattrs\n\tfor (const k in oldAttrs) {\n\t\tif (!(k in newAttrs)) {\n\t\t\tpatches.push($node => {\n\t\t\t\t$node.removeAttribute(k);\n\t\t\t\treturn $node;\n\t\t\t});\n\t\t}\n\t}\n\n\t// once called with $node, loop through all patches and return the updated node.\n\treturn $node => {\n\t\tfor (const patch of patches) {\n\t\t\tpatch($node);\n\t\t}\n\t\treturn $node;\n\t};\n};\n\n// Method to diff the children of the old virtual dom and the new virtual dom.\nconst diffChildren = (oldVChildren, newVChildren) => {\n\t// loop through all children up to the oldchildren length. to check changes\n\tconst childPatches = [];\n\toldVChildren.forEach((oldVChild, i) => {\n\t\tchildPatches.push(diff(oldVChild, newVChildren[i]));\n\t});\n\n\t// slice the newchildren array from the length of oldchildren since they are diffed in the previous method, then for each\n\t// additional child, create the functions that will append the child once ran through render (create real dom nodes)\n\tconst additionalPatches = [];\n\tfor (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n\t\tadditionalPatches.push($node => {\n\t\t\t$node.appendChild(render(additionalVChild));\n\t\t\treturn $node;\n\t\t});\n\t}\n\n\t// since childPatches methods are expecting the $child, not $parent, we will get the childnodes for the parent and use the zip\n\t// method to return the matching patch as per index.\n\treturn $parent => {\n\t\tfor (const [patch, $child] of zip(childPatches, $parent.childNodes)) {\n\t\t\tpatch($child);\n\t\t}\n\n\t\t// for any remaining patches (zip func above ensures only new nodes are passed here) apply the patch\n\t\tfor (const patch of additionalPatches) {\n\t\t\tpatch($parent);\n\t\t}\n\t\treturn $parent;\n\t};\n};\n\nconst diff = (oldVTree, newVTree) => {\n\t// let's assume oldVTree is not undefined!\n\tif (newVTree === undefined) {\n\t\treturn $node => {\n\t\t\t$node.remove();\n\t\t\t// the patch should return the new root node. since there is none in this case,\n\t\t\t// we will just return undefined.\n\t\t\treturn undefined;\n\t\t};\n\t}\n\n\tif (typeof oldVTree === \"string\" || typeof newVTree === \"string\") {\n\t\tif (oldVTree !== newVTree) {\n\t\t\t// could be 2 cases:\n\t\t\t// 1. both trees are string and they have different values\n\t\t\t// 2. one of the trees is text node and the other one is elem node\n\t\t\t// Either case, we will just render(newVTree)!\n\t\t\treturn $node => {\n\t\t\t\tconst $newNode = render(newVTree);\n\t\t\t\t$node.replaceWith($newNode);\n\t\t\t\treturn $newNode;\n\t\t\t};\n\t\t}\n\t\t// this means that both trees are string and they have the same values\n\t\telse {\n\t\t\treturn $node => $node;\n\t\t}\n\t}\n\n\t// we assume that they are totally different and will not attempt to find the differences.\n\t// simply render the newVTree and mount it.\n\tif (oldVTree.tagName !== newVTree.tagName) {\n\t\treturn $node => {\n\t\t\tconst $newNode = render(newVTree);\n\t\t\t$node.replaceWith($newNode);\n\t\t\treturn $newNode;\n\t\t};\n\t}\n\n\tconst patchAttrs = diffAttrs(oldVTree.attrs, newVTree.attrs);\n\tconst patchChildren = diffChildren(oldVTree.children, newVTree.children);\n\n\treturn $node => {\n\t\tpatchAttrs($node);\n\t\tpatchChildren($node);\n\t\treturn $node;\n\t};\n};\n\nexport default diff;\n","import createElement from \"./config/createElement\";\nimport render from \"./config/render\";\nimport mount from \"./config/mount\";\nimport diff from \"./config/diff\";\n\nconst createVirtualApp = count =>\n  createElement(\"div\", {\n    attrs: {\n      id: \"app\",\n      dataCount: count\n    },\n    children: [\n      \"The current count is: \",\n      count.toString(),\n      ...Array.from({ length: count }, () =>\n        createElement(\"div\", {\n          attrs: {},\n          children: [\n            createElement(\"img\", {\n              attrs: {\n                src: \"https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif\"\n              }\n            }),\n            count % 2 === 0 ? \"Caption!\" : \"\"\n          ]\n        })\n      )\n    ]\n  });\n\n// create the initial object representation of dom elements including root tag name, it's attributes and children;\nlet virtualApp = createVirtualApp(0);\n\n// create the initial dom elements.\nconst $app = render(virtualApp);\n\n// mount the initial dom elements.\nlet $rootEl = mount($app, document.getElementById(\"app\"));\n\nsetInterval(() => {\n\tconst n = Math.floor(Math.random() * 10);\n\t// create the new object representation of dom elements\n\tconst updatedVirtualApp = createVirtualApp(n);\n\t// diff the two virtual representations and store the patches to be made\n\tconst patch = diff(virtualApp, updatedVirtualApp);\n\t// Apply the patches.\n\t$rootEl = patch($rootEl);\n\n\tvirtualApp = updatedVirtualApp;\n}, 4000);\n"]}